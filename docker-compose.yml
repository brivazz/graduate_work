version: '3.8'

networks:
  backend:
    driver: bridge

services:

  # nginx:
  #   image: nginx:1.23
  #   volumes:
  #     - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
  #     - ./nginx/conf.d/site.conf:/etc/nginx/conf.d/site.conf:ro
  #   depends_on:
  #     - web
  #   ports:
  #     - 80:80
  #   logging:
  #     driver: gelf
  #     options:
  #       gelf-address: udp://127.0.0.1:5044
  #       tag: nginx
  #   networks:
  #     - backend

  rabbitmq:
    # image: rabbitmq:3.11.13-management-alpine
    image: rabbitmq:3.12.6-management
    environment:
      - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
      - RABBITMQ_DEFAULT_PASS=${RABBIT_PASS}
    ports:
      - 5672:5672
      - 15672:15672
    env_file:
      - .env
    healthcheck:
      # test: rabbitmq-diagnostics -q ping
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 10s
      timeout: 5s
      retries: 15
    networks:
      - backend

  # web:
  #   build: ./web_api/
  #   env_file:
  #     - .env
  #   networks:
  #     - backend
  #   healthcheck:
  #     test: curl --fail http://localhost 8000 || exit -1
  #     interval: 10s
  #     timeout: 10s
  #     retries: 10
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #     rabbitmq:
  #       condition: service_healthy

  celery_worker:
    build: ./voice_service
    command: celery -A worker.celery worker --loglevel=info
    networks:
      - backend
    env_file:
      - .env
    environment:
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - SEARCH_SERVICE_URL=${SEARCH_SERVICE_URL}
    depends_on:
      redis:
        condition: service_healthy

  # voice_service:
  #   build: ./voice_service
  #   env_file:
  #     - .env
  #   networks:
  #     - backend
  #   restart: always
  #   depends_on:
  #     rabbitmq:
  #       condition: service_healthy
  #   environment:
  #     - RABBITMQ_DEFAULT_USER=${RABBIT_USER}
  #     - RABBITMQ_DEFAULT_PASS=${RABBIT_PASS}

  redis:
    image: redis:latest
    networks:
      - backend
    healthcheck:
      test: [ "CMD", "redis-cli", "--raw", "incr", "ping" ]
      interval: 30s
      timeout: 10s
      retries: 50
    ports:
      - 6379:6379

  elasticsearch:
    image: elasticsearch:8.6.2
    environment:
      - "discovery.type=single-node"
      - "xpack.security.enabled=false"
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    ports:
      - 9200:9200
    networks:
      - backend
    healthcheck:
      test: curl -s http://elasticsearch:9200 >/dev/null || exit 1
      interval: 30s
      timeout: 10s
      retries: 50

  # search_service:
  #   build: ./search_service/src
  #   command: sh -c "python migrate.py && tail -f /dev/null"
  #   restart: unless-stopped
  #   container_name: search_service
  #   hostname: search_service
  #   env_file:
  #     - .env
  #   networks:
  #     - backend
  #   ports:
  #     - 8001:8001
  #   depends_on:
  #     redis:
  #       condition: service_healthy
  #     elasticsearch:
  #       condition: service_healthy
